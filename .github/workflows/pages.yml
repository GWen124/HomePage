name: 🚀 Deploy HomePage

# ===========================================
# 🔧 集中配置区域 - 只需修改此处即可
# ===========================================
# 工作流说明：
# - A仓库：当前仓库（执行工作流，无需配置）
# - B仓库：项目源码仓库（从 PROJECT_REPO 获取源码）
# - C仓库：部署目标仓库（部署到 DEPLOY_REPO）
# ===========================================
env:
  # 📂 项目源码仓库配置 (B仓库)
  PROJECT_REPO: 'GWen124/HomePage'  # 项目源码仓库
  PROJECT_BRANCH: 'main'            # 项目源码分支
  
  # 🚀 部署目标仓库配置 (C仓库)
  DEPLOY_REPO: 'GWen124/HomePage'   # 部署目标仓库
  DEPLOY_BRANCH: 'Web'              # 部署目标分支
  
  # 🌐 域名配置
  DOMAIN: 'gw124.top'               # 部署域名
  
  # ⚙️ 构建配置
  NODE_VERSION: '20'                # Node.js 版本
  BUILD_DIR: 'dist'                 # 构建输出目录

on:
  workflow_dispatch:
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  # 代码质量检查
  quality-check:
    name: 🔍 代码质量检查
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project code (B仓库)
        uses: actions/checkout@v4
        with:
          repository: ${{ env.PROJECT_REPO }}
          ref: ${{ env.PROJECT_BRANCH }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run type-check || echo "Type check not configured"

      - name: Lint check
        run: npm run lint || echo "Lint not configured"

  # 构建和部署
  build-and-deploy:
    name: 🏗️ 构建和部署
    runs-on: ubuntu-latest
    needs: quality-check
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout project code (B仓库)
        uses: actions/checkout@v4
        with:
          repository: ${{ env.PROJECT_REPO }}
          ref: ${{ env.PROJECT_BRANCH }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build
        env:
          NODE_ENV: production

      - name: Build info
        id: build_info
        run: |
          echo "build_time=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
          echo "build_hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "build_number=${{ github.run_number }}" >> $GITHUB_OUTPUT

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/
          retention-days: 1

      - name: Checkout deploy repository (C仓库)
        uses: actions/checkout@v4
        with:
          repository: ${{ env.DEPLOY_REPO }}
          ref: ${{ env.DEPLOY_BRANCH }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup deploy branch
        run: |
          # 检查部署分支是否存在
          if git show-ref --verify --quiet refs/remotes/origin/${{ env.DEPLOY_BRANCH }}; then
            echo "Deploy branch exists, checking it out"
            git checkout ${{ env.DEPLOY_BRANCH }}
          else
            echo "Deploy branch does not exist, creating it from main"
            git checkout -b ${{ env.DEPLOY_BRANCH }}
            git push origin ${{ env.DEPLOY_BRANCH }}
          fi

      - name: Clean deploy branch
        run: |
          # 备份重要文件
          if [ -f CNAME ]; then
            cp CNAME /tmp/CNAME.backup
          fi
          if [ -f .nojekyll ]; then
            cp .nojekyll /tmp/.nojekyll.backup
          fi
          
          # 清空目录但保留.git和重要文件
          find . -maxdepth 1 -not -name '.git' -not -name '.' -not -name 'CNAME' -not -name '.nojekyll' -exec rm -rf {} \;
          
          # 恢复重要文件
          if [ -f /tmp/CNAME.backup ]; then
            mv /tmp/CNAME.backup CNAME
          fi
          if [ -f /tmp/.nojekyll.backup ]; then
            mv /tmp/.nojekyll.backup .nojekyll
          fi
          
          # 如果 CNAME 文件不存在，使用配置的域名
          if [ ! -f CNAME ]; then
            echo "${{ env.DOMAIN }}" > CNAME
            echo "CNAME file created with configured domain: ${{ env.DOMAIN }}"
          fi

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files
          path: ./dist/

      - name: Copy build files
        run: |
          cp -r dist/* .
          
          # 添加构建信息到HTML
          if [ -f index.html ]; then
            sed -i "s|</head>|  <!-- Build Info: v${{ steps.build_info.outputs.build_number }} - ${{ steps.build_info.outputs.build_time }} - ${{ steps.build_info.outputs.build_hash }} -->\n</head>|" index.html
          fi

      - name: Commit and push to deploy branch
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "🚀 Deploy: v${{ steps.build_info.outputs.build_number }} (${{ steps.build_info.outputs.build_time }})
            
            📦 Build Info:
            - Version: v${{ steps.build_info.outputs.build_number }}
            - Hash: ${{ steps.build_info.outputs.build_hash }}
            - Time: ${{ steps.build_info.outputs.build_time }}
            - Source: ${{ env.PROJECT_REPO }}@${{ env.PROJECT_BRANCH }}
            - Deploy: ${{ env.DEPLOY_REPO }}@${{ env.DEPLOY_BRANCH }}
            - Domain: ${{ env.DOMAIN }}
            - Trigger: ${{ github.event_name }}
            - Actor: ${{ github.actor }}"
            
            git push origin ${{ env.DEPLOY_BRANCH }}
          fi

  # 创建发布
  create-release:
    name: 📦 创建发布
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout project code (B仓库)
        uses: actions/checkout@v4
        with:
          repository: ${{ env.PROJECT_REPO }}
          ref: ${{ env.PROJECT_BRANCH }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for release
        run: npm run build

      - name: Generate changelog
        id: changelog
        run: |
          # 获取最近的提交信息，使用更安全的方式
          if git rev-parse --verify ${{ github.sha }} >/dev/null 2>&1; then
            # 如果当前提交存在，获取最近的提交
            COMMITS=$(git log --oneline -10 --pretty=format:"- %s (%h)" HEAD~10..HEAD 2>/dev/null || git log --oneline -10 --pretty=format:"- %s (%h)" 2>/dev/null)
          else
            # 如果提交不存在，使用HEAD
            COMMITS=$(git log --oneline -10 --pretty=format:"- %s (%h)" 2>/dev/null || echo "- 无法获取提交历史")
          fi
          
          # 如果没有获取到提交信息，使用默认信息
          if [ -z "$COMMITS" ]; then
            COMMITS="- 构建版本: v${{ github.run_number }}"
            COMMITS="$COMMITS"$'\n'"- 构建时间: $(date '+%Y-%m-%d %H:%M:%S UTC')"
            COMMITS="$COMMITS"$'\n'"- 提交哈希: ${{ github.sha }}"
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          name: HomePage v${{ github.run_number }}
          body: |
            ## 🏠 HomePage - 个人主页
            
            **🚀 发布信息**
            - **版本**: v${{ github.run_number }}
            - **发布时间**: $(date '+%Y-%m-%d %H:%M:%S UTC')
            - **提交哈希**: ${{ github.sha }}
            - **触发者**: ${{ github.actor }}
            - **工作流**: ${{ github.workflow }}
            
            **📝 更新内容**
            ${{ steps.changelog.outputs.changelog }}
            
            **📦 发布内容**
            - ✅ 完整的静态网站文件
            - ✅ 优化的 Vue.js 3 应用
            - ✅ TypeScript 支持
            - ✅ 响应式设计
            - ✅ 移动端适配
            - ✅ PWA 支持
            
            **🎯 功能特性**
            - **🎨 头部导航**: 可配置的 Logo 和品牌标识
            - **📝 首页介绍**: 自定义标题和副标题
            - **🔗 链接模块**: 卡片式布局，支持分页和拖拽
            - **📱 社交链接**: 页脚社交链接展示
            - **🎨 图标系统**: 基于 @vicons/fa 的图标库
            - **🌙 主题支持**: 明暗主题切换
            
            **🔧 技术栈**
            - Vue 3 + TypeScript
            - Vite 构建工具
            - 响应式 CSS Grid 布局
            - 触控和鼠标交互支持
            - GitHub Actions 自动化部署
            
            **📱 设备支持**
            - 📱 手机端 (≤480px): 1列布局
            - 📱 平板端 (≤768px): 2列布局  
            - 💻 笔记本 (≤1024px): 3列布局
            - 🖥️ 桌面端 (≤1440px): 4列布局
            - 🖥️ 大屏 (>1440px): 5列布局
            
            **🔗 相关链接**
            - [📖 使用文档](https://github.com/${{ env.PROJECT_REPO }})
            - [🐛 问题反馈](https://github.com/${{ env.PROJECT_REPO }}/issues)
            - [💡 功能建议](https://github.com/${{ env.PROJECT_REPO }}/discussions)
            - [🌐 在线预览](https://${{ env.DOMAIN }})
            
          draft: false
          prerelease: false

      - name: Create Release Archive
        run: |
          cd ${{ env.BUILD_DIR }}
          zip -r ../homepage-v${{ github.run_number }}.zip .
          cd ..
          echo "Archive created: homepage-v${{ github.run_number }}.zip"

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ./homepage-v${{ github.run_number }}.zip
          tag_name: v${{ github.run_number }}
          prerelease: false

  # 部署状态通知
  notify:
    name: 📢 部署通知
    runs-on: ubuntu-latest
    needs: [build-and-deploy, create-release]
    if: always()
    
    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.build-and-deploy.result }}" == "success" ] && [ "${{ needs.create-release.result }}" == "success" ]; then
            echo "✅ 部署成功！"
            echo "🌐 网站地址: https://${{ env.DOMAIN }}"
            echo "📦 发布版本: v${{ github.run_number }}"
            echo "📂 源码仓库: ${{ env.PROJECT_REPO }}"
            echo "🚀 部署仓库: ${{ env.DEPLOY_REPO }}"
          else
            echo "❌ 部署失败！"
            echo "请检查工作流日志获取详细信息"
            echo "📂 源码仓库: ${{ env.PROJECT_REPO }}"
            echo "🚀 部署仓库: ${{ env.DEPLOY_REPO }}"
          fi
