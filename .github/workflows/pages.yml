name: Deploy to Web Branch

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  actions: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: package.json

      - name: Cache Vite build
        uses: actions/cache@v4
        with:
          path: |
            node_modules/.vite
            dist
          key: ${{ runner.os }}-vite-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-vite-

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Verify build output
        run: |
          # 验证构建输出
          if [ ! -d "dist" ]; then
            echo "❌ dist directory not found"
            exit 1
          fi
          if [ ! -f "dist/index.html" ]; then
            echo "❌ index.html not found in dist"
            exit 1
          fi
          echo "✅ Build verification passed"
          ls -la dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 1

      - name: Checkout Web branch
        uses: actions/checkout@v4
        with:
          ref: Web
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean web branch (preserve CNAME)
        run: |
          # 备份CNAME文件
          if [ -f CNAME ]; then
            cp CNAME /tmp/CNAME.backup
          fi
          # 清空目录但保留.git和CNAME
          find . -maxdepth 1 -not -name '.git' -not -name '.' -not -name 'CNAME' -exec rm -rf {} \;
          # 恢复CNAME文件
          if [ -f /tmp/CNAME.backup ]; then
            mv /tmp/CNAME.backup CNAME
          fi

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: ./

      - name: Process build files
        run: |
          # 添加生成时间注释到index.html
          echo "<!-- Generated on $(date) -->" > index.html.tmp
          cat index.html >> index.html.tmp
          mv index.html.tmp index.html
          echo "✅ Build files processed successfully"
          ls -la

      - name: Commit and push to Web branch
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          if git diff --staged --quiet; then
            echo "ℹ️ No changes to commit"
          else
            git commit -m "Deploy: $(date '+%Y-%m-%d %H:%M:%S')"
            echo "✅ Changes committed"
          fi
          git push origin Web
          echo "✅ Changes pushed to Web branch"

      - name: Get Current Time
        id: time
        run: echo "time=$(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT

      - name: Create Release Archive
        run: |
          # 创建发布压缩包
          zip -r static-website-v${{ github.run_number }}.zip .
          echo "✅ Release archive created"
          ls -la static-website-v${{ github.run_number }}.zip

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: WebHome v${{ github.run_number }}
          body: |
            ## WebHome
            
            **发布时间**: ${{ steps.time.outputs.time }}
            **构建版本**: v${{ github.run_number }}
            **提交哈希**: ${{ github.sha }}
            
            ### 📦 发布内容
            - ✅ 完整的静态网站文件
            - ✅ 优化的 Vue.js 应用
            - ✅ 响应式设计支持
            - ✅ 移动端适配
            - ✅ 深色模式支持
            - ✅ 触摸交互优化
            
            ### 🎯 功能特性
            - **头部导航**: 可配置的 Logo 和品牌标识
            - **主题切换**: 支持日间/夜间/跟随系统模式
            - **首页介绍**: 自定义标题和副标题
            - **链接模块**: 卡片式布局，支持分页和拖拽
            - **页脚信息**: 版权信息和社交链接
            - **图标系统**: 基于 @vicons/fa 的图标库
            
            ### 🔧 技术栈
            - Vue 3 + TypeScript
            - Vite 构建工具
            - 响应式 CSS Grid 布局
            - 触控和鼠标交互支持
            - 移动端触摸优化
            
            ### 📱 设备支持
            - 📱 手机端 (≤480px): 1列布局
            - 📱 平板端 (≤768px): 2列布局  
            - 🖥️ 桌面端 (>768px): 4列布局
          files: static-website-v${{ github.run_number }}.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check workflow runs before cleanup
        uses: actions/github-script@v7
        with:
          script: |
            console.log('检查当前工作流运行状态...');
            
            try {
              const { data: runs } = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'pages.yml',
                per_page: 20
              });
              
              console.log(`当前工作流共有 ${runs.workflow_runs.length} 个运行记录`);
              
              const completedRuns = runs.workflow_runs.filter(run => run.status === 'completed');
              console.log(`其中已完成的有 ${completedRuns.length} 个`);
              
              completedRuns.slice(0, 10).forEach((run, index) => {
                console.log(`${index + 1}. 运行 #${run.run_number} - 状态: ${run.status} - 创建时间: ${run.created_at}`);
              });
            } catch (error) {
              console.log('❌ 获取工作流运行记录失败:', error.message);
              console.log('跳过清理步骤');
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup old workflow runs
        uses: actions/github-script@v7
        with:
          script: |
            console.log('开始清理旧的工作流运行...');
            
            try {
              // 获取当前工作流的所有运行记录
              const { data: runs } = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'pages.yml',
                per_page: 100,
                status: 'completed'
              });
              
              console.log(`找到 ${runs.workflow_runs.length} 个已完成的工作流运行`);
              
              if (runs.workflow_runs.length <= 5) {
                console.log('工作流运行数量不超过5个，无需清理');
                return;
              }
              
              // 按创建时间排序，保留最新的5个
              const sortedRuns = runs.workflow_runs
                .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
              
              const runsToDelete = sortedRuns.slice(5);
              
              console.log(`将删除 ${runsToDelete.length} 个旧的工作流运行`);
              
              // 显示将要删除的运行信息
              runsToDelete.forEach((run, index) => {
                console.log(`${index + 1}. 运行 #${run.run_number} (${run.id}) - 创建时间: ${run.created_at}`);
              });
              
              let deletedCount = 0;
              let errorCount = 0;
              
              for (const run of runsToDelete) {
                try {
                  await github.rest.actions.deleteWorkflowRun({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    run_id: run.id
                  });
                  console.log(`✅ 已删除工作流运行 #${run.run_number} (${run.id})`);
                  deletedCount++;
                  
                  // 添加小延迟避免API限制
                  await new Promise(resolve => setTimeout(resolve, 200));
                } catch (error) {
                  console.log(`❌ 删除工作流运行 #${run.run_number} 失败: ${error.message}`);
                  console.log(`错误详情: ${JSON.stringify(error, null, 2)}`);
                  errorCount++;
                }
              }
              
              console.log(`✅ 清理完成: 成功删除 ${deletedCount} 个，失败 ${errorCount} 个`);
              console.log(`保留了最新的 5 个工作流运行`);
            } catch (error) {
              console.log('❌ 清理工作流运行失败:', error.message);
              console.log('这可能是由于权限不足或API限制导致的');
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}